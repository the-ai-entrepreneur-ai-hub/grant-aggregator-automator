{
  "permissions": {
    "allow": [
      "Bash(npm run dev:*)",
      "Bash(npm install)",
      "Bash(npx tsc:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm install:*)",
      "Bash(rm:*)",
      "Bash(npm cache clean:*)",
      "Bash(node:*)",
      "Bash(cp:*)",
      "Bash(ls:*)",
      "Bash(export npm_config_target_platform=linux)",
      "Bash(export npm_config_target_arch=x64)",
      "Bash(npm rebuild:*)",
      "Bash(yarn add:*)",
      "Bash(yarn build)",
      "Bash(yarn dev)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(git config:*)",
      "Bash(git commit:*)",
      "Bash(curl:*)",
      "Bash(find:*)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(mcp list-servers:*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(python:*)",
      "WebFetch(domain:www.iadb.org)",
      "WebFetch(domain:idblab.org)",
      "WebFetch(domain:bidlab.org)",
      "Bash(mkdir:*)",
      "Bash(pip3 install:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "WebFetch(domain:www.undp.org)",
      "WebFetch(domain:procurement-notices.undp.org)",
      "WebFetch(domain:sgp.undp.org)",
      "WebFetch(domain:www.greenclimate.fund)",
      "WebFetch(domain:www.worldbank.org)",
      "WebFetch(domain:projects.worldbank.org)",
      "WebFetch(domain:www.dgmglobal.org)",
      "WebFetch(domain:www2.fundsforngos.org)",
      "WebFetch(domain:inquiries.worldbank.org)",
      "Bash(chmod:*)",
      "Bash(AIRTABLE_API_KEY=\"pat0mFLRND851TtmB.7adcc56ec8295e6dee3e9ccb650be44af930efa1b8d4bcd5f51bea160340c8db\" AIRTABLE_BASE_ID=\"appR8MwS1pQs7Bnga\" AIRTABLE_TABLE_NAME=\"Grant Opportunities\" python3 -c \"\nimport os\nimport sys\nsys.path.append(''grant_aggregator/core'')\n\nprint(''🔄 Testing Airtable connection...'')\ntry:\n    from airtable import Airtable\n    \n    api_key = os.getenv(''AIRTABLE_API_KEY'')\n    base_id = os.getenv(''AIRTABLE_BASE_ID'')\n    table_name = os.getenv(''AIRTABLE_TABLE_NAME'')\n    \n    print(f''📊 Base ID: {base_id}'')\n    print(f''📋 Table Name: {table_name}'')\n    print(f''🔑 API Key: {api_key[:10]}...'')\n    \n    client = Airtable(base_id, table_name, api_key=api_key)\n    print(''✅ Airtable client initialized successfully'')\n    \n    # Test with a simple record\n    test_record = {\n        ''Grant Name'': ''TEST - Intelligent Scraper Connection'',\n        ''Description'': ''Testing Peru grant scraper connection'',\n        ''Source'': ''Test Run'',\n        ''Status'': ''Test'',\n        ''Priority'': ''HIGH''\n    }\n    \n    result = client.insert(test_record)\n    print(''🎯 Test record created successfully!'')\n    print(''🔗 Airtable integration ready for real scraping data!'')\n    \nexcept Exception as e:\n    print(f''❌ Connection failed: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(AIRTABLE_API_KEY=\"pat0mFLRND851TtmB.7adcc56ec8295e6dee3e9ccb650be44af930efa1b8d4bcd5f51bea160340c8db\" AIRTABLE_BASE_ID=\"appR8MwS1pQs7Bnga\" python3 -c \"\nimport os\nimport requests\n\napi_key = os.getenv(''AIRTABLE_API_KEY'')\nbase_id = os.getenv(''AIRTABLE_BASE_ID'')\n\nprint(''🔍 Checking Airtable base structure...'')\nprint(f''🔑 API Key: {api_key[:15]}...'')\nprint(f''📊 Base ID: {base_id}'')\n\n# Try to get base metadata\nurl = f''https://api.airtable.com/v0/meta/bases/{base_id}/tables''\nheaders = {''Authorization'': f''Bearer {api_key}''}\n\ntry:\n    response = requests.get(url, headers=headers)\n    print(f''📡 API Response Status: {response.status_code}'')\n    \n    if response.status_code == 200:\n        data = response.json()\n        tables = data.get(''tables'', [])\n        print(f''✅ Found {len(tables)} tables in base:'')\n        for table in tables:\n            print(f''  📋 {table[\"\"name\"\"]} (ID: {table[\"\"id\"\"]})'')\n    else:\n        print(f''❌ API Error: {response.status_code}'')\n        print(f''📄 Response: {response.text}'')\n        \nexcept Exception as e:\n    print(f''❌ Request failed: {e}'')\n\")",
      "Bash(AIRTABLE_API_KEY=\"pat0mFLRND851TtmB.7adcc56ec8295e6dee3e9ccb650be44af930efa1b8d4bcd5f51bea160340c8db\" AIRTABLE_BASE_ID=\"appR8MwS1pQs7Bnga\" AIRTABLE_TABLE_NAME=\"Funding Opportunities\" python3 -c \"\nimport os\nfrom airtable import Airtable\n\napi_key = os.getenv(''AIRTABLE_API_KEY'')\nbase_id = os.getenv(''AIRTABLE_BASE_ID'')\ntable_name = os.getenv(''AIRTABLE_TABLE_NAME'')\n\nprint(''🔄 Testing connection to correct table...'')\nprint(f''📋 Table: {table_name}'')\n\ntry:\n    client = Airtable(base_id, table_name, api_key=api_key)\n    \n    # Test with a sample Peru grant opportunity\n    test_record = {\n        ''Grant Name'': ''TEST - Peru Intelligent Scraper'',\n        ''Funder Name'': ''Test Organization'',\n        ''Description'': ''Testing the intelligent Peru grant scraper system - this record validates the Airtable integration is working correctly.'',\n        ''Amount'': ''$50,000'',\n        ''Status'': ''Active'',\n        ''Category'': ''Education, Rural Development'',\n        ''Application Link'': ''https://test-link.com'',\n        ''Source'': ''Scraper Test'',\n        ''Priority'': ''HIGH''\n    }\n    \n    result = client.insert(test_record)\n    record_id = result[''id'']\n    print(f''🎯 SUCCESS! Test record created with ID: {record_id}'')\n    print(''✅ Airtable integration is working!'')\n    print(''🚀 Ready to run the intelligent scrapers and populate with Peru grant opportunities!'')\n    \nexcept Exception as e:\n    print(f''❌ Test failed: {e}'')\n\")",
      "Bash(AIRTABLE_API_KEY=\"pat0mFLRND851TtmB.7adcc56ec8295e6dee3e9ccb650be44af930efa1b8d4bcd5f51bea160340c8db\" AIRTABLE_BASE_ID=\"appR8MwS1pQs7Bnga\" python3 -c \"\nimport os\nimport requests\n\napi_key = os.getenv(''AIRTABLE_API_KEY'')\nbase_id = os.getenv(''AIRTABLE_BASE_ID'')\n\nprint(''🔍 Getting detailed table schema...'')\n\nurl = f''https://api.airtable.com/v0/meta/bases/{base_id}/tables''\nheaders = {''Authorization'': f''Bearer {api_key}''}\n\ntry:\n    response = requests.get(url, headers=headers)\n    data = response.json()\n    \n    # Find the Funding Opportunities table\n    for table in data.get(''tables'', []):\n        if table[''name''] == ''Funding Opportunities'':\n            print(f''📋 Table: {table[\"\"name\"\"]}'')\n            print(''🔍 Fields in this table:'')\n            for field in table.get(''fields'', []):\n                print(f''  • {field[\"\"name\"\"]} ({field[\"\"type\"\"]})'')\n            break\n    else:\n        print(''❌ Funding Opportunities table not found'')\n        \nexcept Exception as e:\n    print(f''❌ Failed to get schema: {e}'')\n\")",
      "Bash(AIRTABLE_API_KEY=\"pat0mFLRND851TtmB.7adcc56ec8295e6dee3e9ccb650be44af930efa1b8d4bcd5f51bea160340c8db\" AIRTABLE_BASE_ID=\"appR8MwS1pQs7Bnga\" AIRTABLE_TABLE_NAME=\"Funding Opportunities\" python3 -c \"\nimport os\nfrom airtable import Airtable\nfrom datetime import datetime\n\napi_key = os.getenv(''AIRTABLE_API_KEY'')\nbase_id = os.getenv(''AIRTABLE_BASE_ID'')\ntable_name = os.getenv(''AIRTABLE_TABLE_NAME'')\n\nprint(''🔄 Testing with correct field names...'')\n\ntry:\n    client = Airtable(base_id, table_name, api_key=api_key)\n    \n    # Test record matching the actual schema\n    test_record = {\n        ''Funder Name'': ''Intelligent Scraper Test'',\n        ''Opportunity Title'': ''TEST - Peru Grant Scraper Integration'',\n        ''Opportunity Description'': ''This is a test record created by the intelligent Peru grant scraping system to validate Airtable integration is working correctly.'',\n        ''Total Funding Available'': 50000,\n        ''Support Type'': ''Grant'',\n        ''Source'': ''Test'',\n        ''Status'': ''Active'',\n        ''Priority Level'': ''High'',\n        ''Application Link'': ''https://test-integration.com'',\n        ''Date Scraped'': datetime.now().strftime(''%Y-%m-%d''),\n        ''Keywords'': [''Peru'', ''Test'', ''Integration''],\n        ''Notes'': ''Test record from intelligent scraper system - ready for real grant data!''\n    }\n    \n    result = client.insert(test_record)\n    record_id = result[''id'']\n    print(f''🎯 SUCCESS! Test record created: {record_id}'')\n    print(''✅ Airtable integration working perfectly!'')\n    print(''🚀 Ready to run real scrapers and populate with Peru opportunities!'')\n    \nexcept Exception as e:\n    print(f''❌ Test failed: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(cat:*)"
    ],
    "deny": []
  }
}